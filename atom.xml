<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>R0R0N0A&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://roron0a.github.io/"/>
  <updated>2017-05-04T13:28:31.000Z</updated>
  <id>http://roron0a.github.io/</id>
  
  <author>
    <name>R0R0N0a</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Obj-C中load方法的本质</title>
    <link href="http://roron0a.github.io/2017/05/04/Obj-C%E4%B8%ADload%E6%96%B9%E6%B3%95%E7%9A%84%E6%9C%AC%E8%B4%A8/"/>
    <id>http://roron0a.github.io/2017/05/04/Obj-C中load方法的本质/</id>
    <published>2017-05-04T13:28:10.000Z</published>
    <updated>2017-05-04T13:28:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong><code>load</code>方法和<code>initialize</code>的讨论也是很多的，这次我们先看下<code>load</code>方法的底层到底如何实现</strong></p>
<p><strong>熟悉ObjC本质,即熟悉<code>runtime</code>的 对<code>load</code>方法都不会陌生，它是在类<code>被加载到运行时</code>的时候被调用的一个<code>hook</code>方法以及<code>父类优于子类,子类优于分类</code></strong></p>
<blockquote>
<p>我们看一下<code>load</code>方法的调用栈</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@interface Fuck : NSObject</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation Fuck</div><div class="line">+(void)load &#123;</div><div class="line">	NSLog(&quot;fuck is loaded&quot;);</div><div class="line">&#125;</div><div class="line">@end</div><div class="line"></div><div class="line">int main(int argc, const char *argv[]) &#123;</div><div class="line">	@autoreleasepool &#123;&#125;</div><div class="line">	return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行后我们会看到控制台简单的输出了 <code>fuck is loaded</code>这个字符串 </p>
<p>接下来我们在<code>load</code>方法那里 打个断点</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">+[Fuck load]</div><div class="line">call_class_loads()</div><div class="line">call_load_methods</div><div class="line">load_images</div><div class="line">dyld::notifySingle(dyld_image_states,ImageLoader const*)</div><div class="line">_dyld_start</div></pre></td></tr></table></figure>
<p><code>call_class_load()</code>和<code>call_load_methods</code>顾名思义 我们看一下这个<code>load_image</code>到底是什么</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line">const char *  </div><div class="line">load_images(enum dyld_image_states state, uint32_t infoCount,  </div><div class="line">            const struct dyld_image_info infoList[])</div><div class="line">&#123;</div><div class="line">    bool found;</div><div class="line"></div><div class="line">    found = false;</div><div class="line">    for (uint32_t i = 0; i &lt; infoCount; i++) &#123;</div><div class="line">    //这里判断是否有 **load**方法</div><div class="line">        if (hasLoadMethods((const headerType *)infoList[i].imageLoadAddress)) &#123;</div><div class="line">            found = true;</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    if (!found) return nil;</div><div class="line"></div><div class="line">    recursive_mutex_locker_t lock(loadMethodLock);</div><div class="line"></div><div class="line">    &#123;</div><div class="line">        rwlock_writer_t lock2(runtimeLock);</div><div class="line">        found = load_images_nolock(state, infoCount, infoList);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (found) &#123;</div><div class="line">        call_load_methods();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return nil;</div><div class="line">&#125;</div><div class="line"></div><div class="line">bool load_images_nolock(enum dyld_image_states state,uint32_t infoCount,  </div><div class="line">                   const struct dyld_image_info infoList[])</div><div class="line">&#123;</div><div class="line">    bool found = NO;</div><div class="line">    uint32_t i;</div><div class="line"></div><div class="line">    i = infoCount;</div><div class="line">    while (i--) &#123;</div><div class="line">        const headerType *mhdr = (headerType*)infoList[i].imageLoadAddress;</div><div class="line">        //是否有**load**方法</div><div class="line">        if (!hasLoadMethods(mhdr)) continue;</div><div class="line"></div><div class="line">        prepare_load_methods(mhdr);</div><div class="line">        found = YES;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return found;</div><div class="line">&#125;</div><div class="line">//准备给load方法调用的类以及分类</div><div class="line">void prepare_load_methods(const headerType *mhdr)  </div><div class="line">&#123;</div><div class="line">    size_t count, i;</div><div class="line"></div><div class="line">    runtimeLock.assertWriting();</div><div class="line"></div><div class="line">    classref_t *classlist = </div><div class="line">        _getObjc2NonlazyClassList(mhdr, &amp;count); //</div><div class="line">    for (i = 0; i &lt; count; i++) &#123;</div><div class="line">        schedule_class_load(remapClass(classlist[i]));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    category_t **categorylist = _getObjc2NonlazyCategoryList(mhdr, &amp;count);</div><div class="line">    for (i = 0; i &lt; count; i++) &#123;</div><div class="line">        category_t *cat = categorylist[i];</div><div class="line">        Class cls = remapClass(cat-&gt;cls);</div><div class="line">        if (!cls) continue;  // category for ignored weak-linked class</div><div class="line">        realizeClass(cls);</div><div class="line">        assert(cls-&gt;ISA()-&gt;isRealized());</div><div class="line">        add_category_to_loadable_list(cat);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//上面的 _getObjc2NonlazyClassList获取所有类的list后 然后用 remapClass获取类对应的指针 然后递归的安排类和当前类的弗雷进入列表</div><div class="line">static void schedule_class_load(Class cls)  </div><div class="line">&#123;</div><div class="line">    if (!cls) return;</div><div class="line">    assert(cls-&gt;isRealized());</div><div class="line"></div><div class="line">    if (cls-&gt;data()-&gt;flags &amp; RW_LOADED) return;</div><div class="line"></div><div class="line">    schedule_class_load(cls-&gt;superclass);</div><div class="line">	//先把父类加入到待加载的列表里 保证父类先调用load方法</div><div class="line">    add_class_to_loadable_list(cls);</div><div class="line">    cls-&gt;setInfo(RW_LOADED); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>**这时 <code>load</code>方法的调用已经就绪 ObjC会执行<code>call_load_methods</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">调用之前的`prepare_load_methods`里准备好的类以及分类里的load方法 并且确保了优先级</div><div class="line">void call_load_methods(void)  </div><div class="line">&#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    do &#123;</div><div class="line">        while (loadable_classes_used &gt; 0) &#123;</div><div class="line">            call_class_loads();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        more_categories = call_category_loads();</div><div class="line"></div><div class="line">    &#125; while (loadable_classes_used &gt; 0  ||  more_categories);</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>**其中待加载的类会在<code>loadable_classes</code>中寻找对应的类 然后找到<code>load</code>选择子进行执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">顾名思义 这个才是负责调用load方法的真正函数</div><div class="line">static void call_class_loads(void)  </div><div class="line">&#123;</div><div class="line">    int i;</div><div class="line"></div><div class="line">    struct loadable_class *classes = loadable_classes;</div><div class="line">    int used = loadable_classes_used;</div><div class="line">    //取出可调用的类 并进行清零</div><div class="line">    loadable_classes = nil;</div><div class="line">    loadable_classes_allocated = 0;</div><div class="line">    loadable_classes_used = 0;</div><div class="line"></div><div class="line">    for (i = 0; i &lt; used; i++) &#123;</div><div class="line">        Class cls = classes[i].cls;</div><div class="line">        load_method_t load_method = (load_method_t)classes[i].method;</div><div class="line">        if (!cls) continue;</div><div class="line">//调用 [Fuck load]的关键 注意，这里不是`objc_msgSend`的形式调用 而是直接使用函数的内存地址</div><div class="line">        (*load_method)(cls, SEL_load);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (classes) free(classes);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>**可见 <code>load</code>方法是在ObjC进行初始化的时候通过动态链接，执行<code>load_images</code> 对其所拥有<code>load</code>方法的文件加入到 <code>loadable_classes</code>里面 然后通过这个列表递归的找到对应的<code>load</code>选择子 进行执行</p>
<blockquote>
<p>那么<code>loadale_classes</code>到底是如何管理的？</p>
</blockquote>
<p>我们从上面的  <code>call_load_methods</code>里可以看到 加载的管理主要是两个表 那么方法的调用过程也自然是两个部分 一个是加载方法 一个是调用方法(命名方法不难得出）</p>
<p>这样 我们画一个调用方法的调用栈<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">load_images</div><div class="line">	load_images_nolock</div><div class="line">		prepare_load_methods</div><div class="line">			schedule_class_load</div><div class="line">				add_class_to_loadable_list</div><div class="line">					loadable_classes++</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">void add_class_to_loadable_list(Class cls)  </div><div class="line">&#123;</div><div class="line">    IMP method;</div><div class="line"></div><div class="line">    loadMethodLock.assertLocked();</div><div class="line"></div><div class="line">    method = cls-&gt;getLoadMethod();// 1 从cls里面获取load方法</div><div class="line">    if (!method) return;</div><div class="line"></div><div class="line">    if (loadable_classes_used == loadable_classes_allocated) &#123; // 2 判断数组是否全部占用</div><div class="line">        loadable_classes_allocated = loadable_classes_allocated*2 + 16; // 3 扩充数组的大小</div><div class="line">        loadable_classes = (struct loadable_class *)</div><div class="line">            realloc(loadable_classes,</div><div class="line">                              loadable_classes_allocated *</div><div class="line">                              sizeof(struct loadable_class));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">// 4 把传入的cls和对应的方法实现加入到列表里    loadable_classes[loadable_classes_used].cls = cls;</div><div class="line">    loadable_classes[loadable_classes_used].method = method;</div><div class="line">    loadable_classes_used++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同理不难得出<code>loadable_categories</code>的实现</p>
<p>执行<code>load</code>方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">void call_load_methods(void)  </div><div class="line">&#123;</div><div class="line">    static bool loading = NO;</div><div class="line">    bool more_categories;</div><div class="line"></div><div class="line">    loadMethodLock.assertLocked();</div><div class="line"></div><div class="line">    if (loading) return;</div><div class="line">    loading = YES;</div><div class="line"></div><div class="line">    void *pool = objc_autoreleasePoolPush();</div><div class="line"></div><div class="line">    do &#123;</div><div class="line">        while (loadable_classes_used &gt; 0) &#123;</div><div class="line">            call_class_loads();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        more_categories = call_category_loads();</div><div class="line"></div><div class="line">    &#125; while (loadable_classes_used &gt; 0  ||  more_categories);</div><div class="line">// 递归的调用类的load方法 直到loadable_classes为空</div><div class="line">// 对于分类的load方法 这里只调用一次</div><div class="line">    objc_autoreleasePoolPop(pool);</div><div class="line"></div><div class="line">    loading = NO;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>然而 对于分类的<code>load</code>方法 这里会复杂很多 我们看下它的调用栈并逐一分析</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">static bool call_category_loads(void)  </div><div class="line">&#123;</div><div class="line">    int i, shift;</div><div class="line">    bool new_categories_added = NO;</div><div class="line">    // 1 可以加载的分类列表</div><div class="line">    struct loadable_category *cats = loadable_categories;</div><div class="line">    int used = loadable_categories_used;</div><div class="line">    int allocated = loadable_categories_allocated;</div><div class="line">    loadable_categories = nil;</div><div class="line">    loadable_categories_allocated = 0;</div><div class="line">    loadable_categories_used = 0;</div><div class="line"></div><div class="line">    for (i = 0; i &lt; used; i++) &#123;</div><div class="line">        Category cat = cats[i].cat;</div><div class="line">        load_method_t load_method = (load_method_t)cats[i].method;</div><div class="line">        Class cls;</div><div class="line">        if (!cat) continue;</div><div class="line">        cls = _category_getClass(cat);</div><div class="line">        if (cls  &amp;&amp;  cls-&gt;isLoadable()) &#123;</div><div class="line">            // 2 调用分类的load方法</div><div class="line">            (*load_method)(cls, SEL_load);</div><div class="line">            cats[i].cat = nil;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 3 把加载过load方法的分类 移除列表</div><div class="line">    shift = 0;</div><div class="line">    for (i = 0; i &lt; used; i++) &#123;</div><div class="line">        if (cats[i].cat) &#123;</div><div class="line">            cats[i-shift] = cats[i];</div><div class="line">        &#125; else &#123;</div><div class="line">            shift++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    used -= shift;</div><div class="line"></div><div class="line">    // 4 重置家在列表</div><div class="line">    new_categories_added = (loadable_categories_used &gt; 0);</div><div class="line">    for (i = 0; i &lt; loadable_categories_used; i++) &#123;</div><div class="line">        if (used == allocated) &#123;</div><div class="line">            allocated = allocated*2 + 16;</div><div class="line">            cats = (struct loadable_category *)</div><div class="line">                realloc(cats, allocated *</div><div class="line">                                  sizeof(struct loadable_category));</div><div class="line">        &#125;</div><div class="line">        cats[used++] = loadable_categories[i];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (loadable_categories) free(loadable_categories);</div><div class="line"></div><div class="line">    if (used) &#123;</div><div class="line">        loadable_categories = cats;</div><div class="line">        loadable_categories_used = used;</div><div class="line">        loadable_categories_allocated = allocated;</div><div class="line">    &#125; else &#123;</div><div class="line">        if (cats) free(cats);</div><div class="line">        loadable_categories = nil;</div><div class="line">        loadable_categories_used = 0;</div><div class="line">        loadable_categories_allocated = 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return new_categories_added;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>我们在开头里面说过 <code>父类优于子类，子类优于分类</code><br>接下来我们分析这个说法</strong></p>
<p>前面的 <code>schedule_class_load(Class cls)</code>的实现，其中 <code>schedule_class_load(cls-&gt;superclass</code>就确保了 <code>父类优于子类</code></p>
<p>后面的 <code>call_load_methods</code>的实现 <code>do while</code>不能完全确保 <code>子类优于分类</code> 所以就有了 <code>call_category_loads</code> 判断类是否加载到了内存里面 我们看下代码片段</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if(cls &amp;&amp; cls-&gt;isLoadable)) &#123;</div><div class="line">	(*load_method)(cls,SEL_load);</div><div class="line">	cats[i].cat = nil;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样 我们就确保了  <code>子类优于分类</code>这个条件</p>
<blockquote>
<p><strong>总结</strong></p>
</blockquote>
<p>通过上面的各种分析和调用 我们知道<code>load</code>方法是优于<code>main</code>函数的  而且<code>load</code>的非惰性加载以及<code>类</code>和<code>分类</code>的调用并不会冲突 这就成了黑魔法<code>method swizzle</code>的最好时间</p>
<blockquote>
<p>参考</p>
</blockquote>
<p>NSObject +load and +initialize - What do they do<br><a href="http://stackoverflow.com/questions/13326435/nsobject-load-and-initialize-what-do-they-do" target="_blank" rel="external">http://stackoverflow.com/questions/13326435/nsobject-load-and-initialize-what-do-they-do</a><br>Objective-C +load vs +initialize<br><a href="http://blog.leichunfeng.com/blog/2015/05/02/objective-c-plus-load-vs-plus-initialize/" target="_blank" rel="external">http://blog.leichunfeng.com/blog/2015/05/02/objective-c-plus-load-vs-plus-initialize/</a><br>你真的了解 load 方法么？<br><a href="http://draveness.me/load/" target="_blank" rel="external">http://draveness.me/load/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;code&gt;load&lt;/code&gt;方法和&lt;code&gt;initialize&lt;/code&gt;的讨论也是很多的，这次我们先看下&lt;code&gt;load&lt;/code&gt;方法的底层到底如何实现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;熟悉ObjC本质,即熟悉&lt;code
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Obj-C中的class_object</title>
    <link href="http://roron0a.github.io/2017/05/04/Obj-C%E4%B8%AD%E7%9A%84class-object/"/>
    <id>http://roron0a.github.io/2017/05/04/Obj-C中的class-object/</id>
    <published>2017-05-04T13:21:33.000Z</published>
    <updated>2017-05-04T13:21:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文仅对ObjC的<code>class</code>以及<code>instance</code>的本质进行分析</strong></p>
<hr>
<blockquote>
<p>先放出结论，ObjC的类和实例对象 都是对象<br>类是<code>metaClass</code>的实例对象<br>听起来有点绕，我们下面进行逐一分析。</p>
</blockquote>
<p><strong>首先，我们先看<code>objc_object</code>和<code>objc_class</code>这两个结构体</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">typdef struct objc_class *Class;</div><div class="line">typdef struct objc_object *id; //不会陌生</div><div class="line">//Class和id的数据结构</div><div class="line">//Represents an instance of a class.</div><div class="line">struct objc_object &#123;</div><div class="line">	isa_t isa;</div><div class="line">&#125;;</div><div class="line">//A pointer to an instance of a class.</div><div class="line">struct objc_class : objc_object&#123;</div><div class="line">	isa_t isa;</div><div class="line">	Class superclass;</div><div class="line">	cache_t cache;</div><div class="line">	class_data_bits_t bits; //class_rw_t * plust custom rr/alloc flags</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">class_rw_t data() &#123;</div><div class="line">	return (class_rw_t *)(bits &amp; FAST_DATA_MASK);</div><div class="line">&#125;</div><div class="line"></div><div class="line">struct class_rw_t &#123;  </div><div class="line">    uint32_t flags;</div><div class="line">    uint32_t version;</div><div class="line"></div><div class="line">    const class_ro_t *ro; //常量指针</div><div class="line"></div><div class="line">    method_array_t methods;</div><div class="line">    property_array_t properties;</div><div class="line">    protocol_array_t protocols;</div><div class="line"></div><div class="line">    Class firstSubclass;</div><div class="line">    Class nextSiblingClass;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">struct class_ro_t &#123;  </div><div class="line">    uint32_t flags;</div><div class="line">    uint32_t instanceStart;</div><div class="line">    uint32_t instanceSize;</div><div class="line">    uint32_t reserved;</div><div class="line"></div><div class="line">    const uint8_t * ivarLayout;</div><div class="line"></div><div class="line">    const char * name;</div><div class="line">    method_list_t * baseMethodList;</div><div class="line">    protocol_list_t * baseProtocols;</div><div class="line">    const ivar_list_t * ivars;</div><div class="line"></div><div class="line">    const uint8_t * weakIvarLayout;</div><div class="line">    property_list_t *baseProperties;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">struct objc_ivar_list &#123;</div><div class="line">	int ivar_count;</div><div class="line">#ifdef __LP64__</div><div class="line">	int space;</div><div class="line">#endif</div><div class="line">	struct objc_ivar ivar_list[1];</div><div class="line">&#125;;</div><div class="line"></div><div class="line">struct objc_method_list &#123;</div><div class="line">	struct objc_method_list *obsolete;</div><div class="line">	</div><div class="line">	int method_count;</div><div class="line">#ifdef __LP64__</div><div class="line">	int space;</div><div class="line">#endif</div><div class="line">	struct objc_method method_list[1];</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>不难看出ObjC中的 属性 方法 以及协议等信息 都存储在<code>class_rw_t</code><br>其中 常量指针<code>ro</code>其结构体为<code>class_ro_t</code>存储了当前类在编译器就已经确定的属性 方法 以及协议</strong></p>
<p><strong>所以我们得出 凡是第一个地址是<code>isa</code>的指针的 都是objc里的对象。我们在运行时是通过这个指针 来确定对象是属于哪个<code>Class</code></strong></p>
<p><strong>那么 ObjC中的 <code>类</code> 也是一个对象(对类发送消息，即调用类方法）。那<code>类</code>在运行时指向的<code>Class</code>又是什么？</strong></p>
<p><strong>接着就是我们开头引入的<code>meta class</code> .</strong></p>
<p><strong>我们知道ObjC对象的方法只是存储在对象结构体里中<code>class_data_bits_t</code>的结构体中。当<code>实例方法</code>被调用的时候，它要通过自己的<code>isa</code>来查找对应的类，然后在<code>class_data_bits_t</code>这个结构体里（<code>class_rw_t</code> <code>class_ro_t</code>)查找方法的实现。同时每一个<code>objc_class</code>也有一个指向自己父类的指针<code>super_class</code>来查找自己所继承的<code>method_list</code></strong></p>
<p><strong>那么类方法的实现是怎样查找和调用？这时就是<code>metaclass</code>来保证无论是<code>class</code>还是<code>object</code>都能通过<code>一样的机制来查找方法的实现</code></strong></p>
<p><code>object        
isa_t isa</code><br>d asdasdasd<br><code>RootClass
isa_t isa</code></p>
<p><code>RootMetaClass
isa_t isa</code></p>
<p>这张经典的 <code>Classes and metaclasses</code>的示例图<br><a href="http://www.sealiesoftware.com/blog/archive/2009/04/14/objc_explain_Classes_and_metaclasses.html" target="_blank" rel="external">objc expalain:Classes and metaclasses</a><br><strong>虚线代表<code>isa</code>指针的轨迹<br>实线代表<code>class</code>的轨迹</strong><br><img src="http://www.sealiesoftware.com/blog/class%20diagram.pdf" alt=""></p>
<p><strong>每一个类的<code>isa</code>都指向对应的<code>metaClass</code> 这样<code>类方法</code>和<code>实例方法</code>的调用机制的目的就一样了</strong></p>
<ul>
<li>实例方法调用，通过对象的<code>isa</code>在<code>Class</code>中获取实例方法的实现</li>
<li>类方法调用 通过类的<code>isa</code>在<code>metaClass</code>中获取类方法的实现</li>
<li>最终<code>RootClass</code>的<code>superclass</code>则为nil 形成了一个闭环</li>
</ul>
<hr>
<p><strong>参考引用</strong><br>*Objective-C 中的类和对象<br><a href="http://blog.ibireme.com/2013/11/25/objc-object/" target="_blank" rel="external">http://blog.ibireme.com/2013/11/25/objc-object/</a><br>从 NSObject 的初始化了解 isa<br><a href="http://draveness.me/isa/" target="_blank" rel="external">http://draveness.me/isa/</a><br>What is a meta-class in Objective-C?<br><a href="https://www.cocoawithlove.com/2010/01/what-is-meta-class-in-objective-c.html" target="_blank" rel="external">https://www.cocoawithlove.com/2010/01/what-is-meta-class-in-objective-c.html</a><br>[objc explain]: Classes and metaclasses<br><a href="http://www.sealiesoftware.com/blog/archive/2009/04/14/objc_explain_Classes_and_metaclasses.html" target="_blank" rel="external">http://www.sealiesoftware.com/blog/archive/2009/04/14/objc_explain_Classes_and_metaclasses.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;本文仅对ObjC的&lt;code&gt;class&lt;/code&gt;以及&lt;code&gt;instance&lt;/code&gt;的本质进行分析&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;先放出结论，ObjC的类和实例对象 都是对象&lt;br&gt;类是&lt;code&gt;met
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://roron0a.github.io/2017/05/03/Hello/"/>
    <id>http://roron0a.github.io/2017/05/03/Hello/</id>
    <published>2017-05-03T09:49:50.000Z</published>
    <updated>2017-05-03T09:50:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
